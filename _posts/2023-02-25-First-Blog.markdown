---
layout: post
title:  "Overpass 3"
date:   2023-02-23 21:10:18 -0600
categories: jekyll update
---

# Overpass 3

## Enumeration

`sudo nmap -sSCV 10.10.45.32 -v`

![20230225214145.png](/assets/20230225214145.png)

`nikto -h 10.10.45.32`

![20230225214155.png](/assets/20230225214155.png)

dirbuster

after some time dirb found a backup directory that we have access too. It contains one file named backup.zip which we download.

![20230225214204.png](/assets/20230225214204.png)

Once we download the file, we unzip it and find CustomerDetails.xlsx.gpg and priv.key in it.

![20230225214211.png](/assets/20230225214211.png)

We use file to confirm that the priv.key is a gpg private key pair.

![20230225214218.png](/assets/20230225214218.png)

We can then use it to decrypt CustomerDetails and once we open the file in excel we see a list of usernames and passwords.

![20230225214222.png](/assets/20230225214222.png)

![20230225214229.png](/assets/20230225214229.png)

We check to see if we have access to the ftp server with one of these pairs.

![20230225214234.png](/assets/20230225214234.png)

We see that the ftp server looks like it may be hosting the files for the website.

We create a malicious php file using revshells.com, start our netcat listener, upload the file to the ftp server, and visit the page to get the shell!

![clip_image013.png](/assets/clip_image013.png)

![20230225214247.png](/assets/20230225214247.png)

After doing some manual enumeration without finding much I run linpeas to see if there is anything I missed. Linpeas finds us an interesting file in /etc/exports with the contents below.

/home/james *(rw,fsid=0,sync,no_root_squash,insecure)

We can check this setting manual by either reading /etc/exports or using showmount -e 127.0.0.1.

This file is saying that there is an NFS running on this machine. It is allowed to export the directory /home/james. The asterisk tells us there are no IP restrictions for who can mount the share. The options that we are interested in are no_root_squash and insecure. You can google no_root_squash hacktricks to find a way to exploit this configuration.

After attempting to mount the NFS share I ran into an issue with connecting to the target. The error was No route to host.

This makes me think the host is only listening on localhost. We confirm this by running showmount and see where it is listening. At this point we change our user to paradox using the password we got earlier. This will allow us to use ssh port forwarding. We could stay on apache and use a tool like chisel, but ssh is more stable so I prefer to use it when possible.

Setup the port forwarding. We need two separate ports to allow us to mount the NFS share. The nfs port and the mountd port. We can find these ports by using rpcinfo -p.

![20230225214259.png](/assets/20230225214259.png)

We use ssh to do a local port forward to the target ports using paradoxâ€™s connection.

![20230225214306.png](/assets/20230225214306.png)

Now we can mount the share locally on our attacking machine, being sure to specify the ports we used in our port forwarding. Note you must also use tcp or else you will return with errors. -v is used to help with troubleshooting.

![20230225214312.png](/assets/20230225214312.png)

We can then move into the mounted directory and get the user flag.

![20230225214317.png](/assets/20230225214317.png)

We then need to setup a way to login as James, so we create a new ssh key, modify his authorized_keys in his .ssh directory, and connect using our new key.

Since the NFS drive is configured with no_root_squash, any command we run as root on our attacking machine is the same as running it as root from the vulnerable host. Using the guide at hacktricks I simply copy the /bin/bash binary into my mounted directory and set the SUID bit. The reason we need to use a binary instead of a script is due to the limitations that SUID bits have with scripts. Even when scripts have a SUID bit set, they will not run as root due to security implications.

![20230225214328.png](/assets/20230225214328.png)

When I attempted to run the command ./bash -p we get errors about GLIBC version not being found.

![clip_image023.png](/assets/clip_image023.png)

This happens because I copied my bash binary from my attacking machine which is compiled in a different version of GLIBC than what the vulnerable host has. My workaround was to use our session with james to copy the local /bin/bash binary from the target machine. Once the file is copied, I can edit the file using my mounted drive to enable the SUID bit, and to make sure it is owned by root.

![20230225214335.png](/assets/20230225214335.png)

Now when we run the binary on the james session we get a root shell!

![20230225214339.png](/assets/20230225214339.png)
